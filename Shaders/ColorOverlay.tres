[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

//uniform vec4 color : source_color;

varying float target_hue;
varying float target_saturation;

vec3 rgb2hsv(vec3 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void vertex()
{
	vec3 hsv = rgb2hsv(COLOR.xyz);
	target_hue = hsv.x;
	target_saturation = hsv.y;
}

void fragment()
{
	vec4 pixel = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec3 colored = rgb2hsv(pixel.xyz);
	colored.x = target_hue;
	colored.y = target_saturation;
	colored.z *= 0.7;
	colored.z += 0.3;
	colored = hsv2rgb(colored);
	COLOR = vec4(colored, 1) * COLOR.w + pixel * (1.0 - COLOR.w);
}"
