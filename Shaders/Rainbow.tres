[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform vec2 pixelsize = vec2(0, 0);

vec3 rgb2hsv(vec3 c)
{
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
	vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment()
{
	vec4 tColor = texture(TEXTURE, UV);
	vec3 hsv = rgb2hsv(tColor.rgb);
	
	vec2 uv = UV;
	if(pixelsize.x > 0.0 && pixelsize.y > 0.0)
	{
		uv = floor(uv / pixelsize) * pixelsize;
	}
	else if(pixelsize.x > 0.0)
	{
		uv.x = floor(uv.x / pixelsize.x) * pixelsize.x;
	}
	else if(pixelsize.y > 0.0)
	{
		uv.y = floor(uv.y / pixelsize.y) * pixelsize.y;
	}
	
	hsv.x = mod(hsv.x + (uv.y + uv.x) / 4. - TIME / 4., 1);
	vec3 rgb = hsv2rgb(hsv);
	COLOR = vec4(rgb.rgb, tColor.a);
}"
